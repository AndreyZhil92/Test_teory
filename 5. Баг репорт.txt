Встречающиеся термины и определения

bug report – отчет об ошибке, описание того, что пошло не так.

severity – важность, это атрибут баг-репорта, характеризующий влияние бага на общую функциональность тестируемого ПО

priority – приоритет, атрибут баг-репорта, показывающий очередность выполнения задачи (исправления бага).

fix bug – пофиксить баг, исправить его.

description – описание чего – то, в контексте данного урока – один из пунктов баг-репорта, в котором дается описание проблемы, предусловия, шаги для воспроизведения и др.

expected result — ожидаемый результат, ожидания, которые мы выводим из требований, знаний о ПО и здравого смысла 

actual result – фактический результат, то, что получилось в реальности после проделанных действий

error/mistake – ошибка, действие, которое допустил разработчик и которое привело к дефекту в ПО.

bug (defect, fault) – дефект в системе, несоответствие фактических данных ожидаемым при тестировании ПО.

issue – выявленная тестировщиком проблема.

failure – отказ, сбой в работоспособности системы из-за проявления дефекта.

root cause – корневая причина бага

Что такое баг?

Bug (defect, fault) – неисправность/дефект в системе, несоответствие фактических данных ожидаемым в процессе исполнения тест кейса, в результате чего продукт не соотвествует требованиям. Его следует отличать от Ошибки (error/mistake) именно в действиях человека в документации, коде, настройке окружения и т.д.

То есть, Ошибка в коде/документации/настройке окружения приводит к какому-то Дефекту/Неисправности (bug/defect/fault), в результате чего имеем программу, которая работает с ошибками. Это может привести к Отказу работоспособности системы в целом (failure). Например, баг в коде может привести к тому, что при введении пользователем каких-либо данных система падает.

Ошибка                (ведет к)       Неисправность     (ведет к)         Отказ

error/mistake      (leads to)       bug/defect/fault     (leads to)         failure

Что такое баг-репорт?

Когда тестировщик проходит тест кейс, он присваивает ему статус passed или failed, это и будет результатом тестирования. Если у тест кейса статус failed, то значит в программе есть неисправность, о которой тестировщик должен сообщить разработчикам, а они, в свою очередь,  должны ее устранить. Для этого тестировщик заводит баг-репорт - отчет об ошибке, в котором описано несоответствующее требованиям поведение ПО. Цель баг-репорта – описать, что в системе работает не так, чтобы это исправить сейчас или в будущем. Кстати, тест кейсы, баг-репорты и другая документация, которую тестировщик производит на проекте, называются артефактами тестирования.

Написание хорошего баг-репорта – это один из самых важных навыков тестировщика. Тестировщик не создает сами баги (их создает код, который пишут программисты), он создает отчеты об ошибках, в которых показывает, в каком месте программы с какой настройки и какой пользователь не имеет возможность что-то сделать. Правильно и понятно расписав, в чем заключается баг, тестировщик экономит время и труд своих коллег, исправления будут делаться быстрее, а качество ПО будет лучше.

Баг-репорт по структуре похож на тест кейс, так как по сути, баг-репорт – это результат выполнения тест кейса. Если тестировщик, выполняя определенный тест кейс, нашел по нему баг, то он должен описать, какие шаги были сделаны, какие результаты по факту получены, а какие ожидались - все шаги и ожидаемые результаты мы берем из тест кейса.

Баг-репорт содержит:

1) заголовок (summary) – отвечает на 3 вопроса: что, когда и где именно не работает.

2) problem – краткое описание проблемы для полного представления о баге.

3) приоритет/важность (priority/severity) – в отличие от тест кейса, в баг-репорте есть два понятия – приоритет и важность.

Priority – это атрибут, указывающий на очередность выполнения задачи или устранения дефекта.

Severity – это атрибут, характеризующий влияние дефекта на работоспособность приложения.

Например,  в случае, когда не получается авторизоваться в приложении, priority и severity высокие.

4) предусловия (preconditions)

5) шаги воспроизведения (steps to reproduce) – их можно копировать прямо из тест кейса, по которому был найден баг

6) ожидаемый результат (expected result) – тоже можно копировать из тест кейса, если баг был найден именно по нему

7) фактический результат (actual result) – актуальный на время создания баг-репорта результат. Фактический результат не похож на ожидаемый.

8) version found  – версия, на которой найдена проблема (любое тестируемое ПО имеет версию, и ее надо указывать).

9) любую другую информацию, которая поможет пофиксить баг, воспроизвести в будущем и проверить. Чем понятнее написан  баг-репорт – тем быстрее и точнее исправляется баг.

Высокий приоритет и низкая серьезность –  такое сочетание бывает, когда баг на функционал влияет незначительно, но зато на пользовательский опыт влияет очень сильно. То есть, в эту категорию попадают баги, не влияющие на программу, но требующие исправления, например:

1.  Кнопки перекрывают друг друга. Они кликабельны, но визуальное впечатление портится.

2.  Логотип компании на главной странице содержит орфографическую ошибку. На функционал это вообще не влияет, но портит пользовательский опыт. Этот баг нужно исправить с высоким приоритетом, несмотря на то, что на продукт он влияет минимально.

Степень серьезности бага:

- blocker - блокирует дальнейшую работу с программой

- critical - нарушает работу основного функционала, делает невозможным использование основных функций

- major - затрудняет работу основного функционала, а использование дополнительных функций становится невозможным

- minor - относительно мало влияет на функционал системы или вообще не влияет

Памятка хорошего баг-репорта:

1. Проверить наличие такого же баг-репорта в баг-трекинговой системе

2. Воспроизвести данный баг несколько раз и убедиться, что он действительно повторяется

3. Найденный баг имеет отношение к спецификации проекта

4. Баг-репорт заводить сразу же, как только обнаружен баг, так как потом важные детали (или сам баг) будут забыты

5. Один баг - один баг-репорт

6. В баг-репорте надо использовать правильную техническую лексику

7. В заголовке должен быть только ответ на вопрос: какая проблема, где и когда появилась. Любая другая информация находится в полях, а не в заголовке.

8. В полях баг-репорта нужно подробно объяснить, как воспроизвести ошибку, указать всю необходимую для этого информацию.

9. Всегда следует писать ожидаемый результат (даже если он и так очевиден)

10. Важно правильно указывать окружение (ОС, браузер, настройки и т.д.), в котором произошел дефект.

11. Обязательно прикреплять ссылку на требования, нарушение которого ведет к появлению дефекта ПО, и ссылку на тест кейс, по которому найден баг.

12. Прикреплять скриншоты, выделяя на них ошибки, необходимо в случае, если они действительно помогут в воспроизведении проблемы (например, с визуальным отображением).

13. В конце следует внимательно прочитать еще раз, убедиться, что все поля заполнены, отсутствуют  грамматические ошибки, а сам отчет эмоционально нейтрален.

Практическое задание

1. В Форме обратной связи в разделе Контакты на сайте zzzzzz.com после заполнения всех полей и нажатия на кнопку «Отправить сообщение» ничего не происходит (сообщение не отправляется).



Был заведен баг-репорт, сообщающий об этом, но данный баг-репорт составлен плохо. Подумайте, где именно "плохие" места. Допустим, Вы - разработчик и Вам надо его пофиксить. Все ли понятно?



Давайте разбираться.

1) Title (заголовок) — отражает ли суть дефекта? Отвечает ли на три вопроса “Что? Где? Когда?” Разработчик поймет сразу в чем проблема?

А ведь заголовок баг-репорта — это первое, что видит разработчик, получая отчет, и иногда при правильном оформлении, этого бывает вполне достаточно, чтобы понять в чем заключается дефект и как его исправить. Хороший заголовок будет, например, таким: "При нажатии на кнопку «Отправить сообщение» в форме обратной связи сообщение не отправляется"

2) Problem (в чем собственно проблема) — хорошо ли описана? Сможет ли разработчик сразу приступить к исправлению этой проблемы?

3) Precondition (начальные условия) указываются, если есть специфичные действия или шаги воспроизведения объемные. Например:
1. Быть авторизованным в системе.
2. Находиться на главной странице.

А что в баг-репорте? Этого достаточно, чтобы воспроизвести баг?

4) Steps To Reproduce — это шаги, при которых повторяется найденная ошибка. Например:
1. Нажать на кнопку “Войти”
2. Ввести “Имя пользователя” и “Пароль”
3. Нажать на кнопку “Ок”

В приведенном баг-репорте нет ли лишних или ненужных шагов воспроизведения, которые будут отвлекать и тратить время команды?

5) Actual Result — фактический результат, тот, который получил тестировщик при выполнении описанных шагов и в идеале тоже должен отвечать на три вопроса “Что? Где? Когда?”.

Достаточно ли ответа "Ничего нет"  в баг-репорте?

6) Expected Result — это результат, который должен быть при выполнении шагов. Обычно (в идеале!) его можно найти в техническом задании к проекту (ТЗ). На практике же, ТЗ бывает не всегда и ожидаемый результат определяется либо здравым смыслом, либо по аналогии.

Что со здравым смыслом в этом баг-репорте? )))

7) приоритет и серьезность - вроде как бы попали. Но не очень. Серьезность, наверное, повыше будет.

 

2. Заведите свой баг-репорт. Можете использовать Excel для этого, в нем создайте 9 колонок:

title, problem, preconditions, steps to reproduce, actual result, expected result, priority, severity, version found  (версия вашего браузера, допустим, что вы тестируете приложение онлайн)

Постарайтесь сделать баг-репорт максимально понятным, но в то же время кратким.

Встречающиеся термины и понятия

resolved – выполнен (один из статусов баг-репорта)

reopen – переоткрыт (один из статусов баг-репорта)

fixed – исправлен (один из статусов баг-репорта)

reproduce – воспроизвести

 

Жизненный цикл баг-репорта

Жизненный цикл баг-репорта – это тот путь, который проходит баг-репорт (и баг вместе с ним) в баг-трекинговой системе. Он включает в себя 4 основные стадии:

1. Открыт (Open) — тестировщик выявил баг и добавил в репорт, но никто за него еще не брался.

2. В работе (In Progress) — о баге сообщили разработчику, он занялся исправлением: воспроизводит его по тем шагам, что написаны в баг-репорте, пытается понять, в чем проблема, где в коде эта ошибка.

3. Исправлен (Resolved/Testing) — исполнитель закончил работу по исправлению бага и передал проект на повторную проверку тестировщику. Если тестировщик проверил и видит, что все хорошо - баг-репорт закрывается, если все же он воспроизводит баг, видит, что он все еще существует, то переводит в статус Переоткрыт (Reopen), оттуда баг-репорт снова попадает в In progress, пока не решится проблема.

4. Закрыт (Closed) — баг исправлен и больше не воспроизводится.

 На 3 стадии помимо Resolved/Testing возможны другие варианты развития событий:

- Отклонен (Rejected) — исправлению бага помешала ошибка в репорте, например, неверный алгоритм в пункте «Шаги к воспроизведению».

- Отсрочен (Deferred) — баг признан неприоритетным и исправление переносится.

- Невозможно воспроизвести (Cannot Reproduce), например, разработчик не смог воспроизвести баг в следующих случаях:

- тестировщик плохо описал баг в баг-репорте,

- у разработчика другая версия ПО, где этого бага нет,

- тестировщик не проверили 10 раз, что это действительно воспроизводимый баг, и разработчик его мог просто не найти

В таком случае тестировщик проверяет, пытается воспроизвести баг, если не получается, то пытается выяснить, почему так случилось. В случае, если тестировщик видит свою ошибку в баг-репорте, то он его закрывает и пишет причину.



Основная работа тестировщика происходит на этапе Open, где заводится баг-репорт, и в Resolved/Testing.


Встречающиеся термины и определения
workflow –  процесс прохождения  жизненного цикла баг-репорта.
Bug-tracking system – баг-трекинговая система, система управления багами.
Project Management System (PMS) – система управления проектами
issue type – тип проблемы (например, это баг)
summary – краткое описание
environment – окружение
labels – метки (теги, ключевые слова)
tester – тестировщик
Баг-трекинговые системы

Bug-tracking system – это инструмент отслеживания ошибок, предназначенный для регистрации багов, а также управления жизненным циклом бага. Эта программа позволяет учитывать и контролировать ошибки и неполадки, найденные в программном обеспечении, упрощать отслеживание, классификацию и приоритизацию багов, а также следить за процессом устранения этих ошибок. Примеры баг-трекинговых систем (баг-трекеров):

- Jira

- BugZilla

- Redmine

- Trello

и другие.

Такие программы (системы) идут в составе комплексных систем управления проектами – Project Management System (например, Jira). Они содержат в себе:
- возможность ведения проектов и управления задачами (у задач есть такой же workflow – хождение по жизненному циклу баг-репорта, статусам, так же как и у багов). По сути, баг-трекинговые системы позволяют управлять отчетами об ошибках.
- сбор, анализ и предоставление статистики по баг-репортам и трудозатрам. Баг-трекеры очень полезны для аналитики: с их помощью можно получить информацию, которая позволит повысить общую эффективность команды и потенциально оптимизировать затраты на разработку.
- возможность организации взаимосвязей между баг-репортами, тест-кейсами в тестовой системе, требованиями, а также проведение анализа этих связей.
-  информацию для включения в отчет о результатах тестирования.
- упрощают коммуникацию между тестировщиками и разработчиками.

В Jira есть несколько полей у баг-репорта, для полноценного составления баг-репорта на начальном этапе достаточно знание следующих полей:
- Project – позволяет указать, к какому проекту относится дефект
- Issue type – позволяет указать, что именно представляет собой создаваемый артефакт. JIRA позволяет создавать не только отчёты о дефектах, но и множество других артефактов, типы которых можно настраивать.
- Summary – позволяет указать краткое описание дефекта
- Priority (поля severity нет, но его можно добавить)
- Environment – содержит описание аппаратной и программной конфигурации, в которой проявляется дефект.
- Description – позволяет указать подробное описание дефекта. Здесь тестировщик самостоятельно прописывает шаги воспроизведения, ожидаемый и фактический результаты. Также тут можно указать severity бага.
- Labels  – содержит метки, по которым можно группировать и классифицировать дефекты
- Tester  – содержит имя автора описания дефекта.
Посмотреть на практике работу в Jira можно здесь: https://www.youtube.com/watch?v=6YrgKBTzb5o