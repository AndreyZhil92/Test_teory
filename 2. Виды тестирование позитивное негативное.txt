Встречающиеся понятия:

User Story — способ описания требований к разрабатываемой системе, сформулированных как одно или более предложений на повседневном или деловом языке пользователя. Т.е., это задачи, сформулированные от лица пользователей.
Testing types – типы/виды тестирования
Functional testing – Функциональное тестирование (= тестирование функциональных характеристик ПО)
Non-Functional testing – Нефункциональное тестирование (= тестирование нефункциональных характеристик ПО: безопасность, конфигурация, удобство и т.д.)
Positive testing – Позитивное тестирование (проверка поведения системы на ожидаемые действия пользователя)
Negative testing – Негативное тестирование (проверка поведения системы на неожидаемые действия пользователя)
Configuration testing – Тестирование конфигурации (вид нефункционального тестирования)
Reliability testing – Тестирование надежности (вид нефункционального тестирования)
Installation testing – Тестирование инсталляции (вид нефункционального тестирования)
Security testing – Тестирование безопасности (вид нефункционального тестирования)
Robustness testing – Тестирование отказоустойчивости (вид нефункционального тестирования)
Performance/Load testing – Тестирование производительности (вид нефункционального тестирования)
Stress testing – Стресс-тестирование (вид нефункционального тестирования)
Usability testing – Тестирование  удобства использования (вид нефункционального тестирования)
Comliance testing – Тестирование  соответствия требованиям законодательств (вид нефункционального тестирования)
Regression testing – Регрессионное тестирование (вид тестирования, в зависимости от способа применения тестов)
Сonfirmation testing – Повторное/подтверждающее тестирование (вид тестирования, в зависимости от способа применения тестов)
Smoke testing – Дымовое тестирование (вид тестирования, в зависимости от способа применения тестов)
Sanity testing – Санитарное тестирование (вид тестирования, в зависимости от способа применения тестов)
Manual testing – Ручное тестирование (вид тестирования, в зависимости от способа проведения)
Automated testing – Автоматизированное тестирование (вид тестирования, в зависимости от способа проведения)
Exploratory testing – Исследовательское тестирование (вид тестирования, в зависимости от подхода к тестированию)
Ad-hoc testing – Свободное тестирование (вид тестирования, в зависимости от подхода к тестированию)
Dynamic testing – Динамическое тестирование - требует выполнение тестируемой программы
Static testing – Статическое тестирование - оценивает программу без ее запуска.

Для чего нужно знать виды тестирования?
Знание видов тестирования помогают оценить:

– функциональные характеристики качества продукта (полнота, правильность, целесообразность)

– нефункциональные характеристики качества продукта (надежность, производительность, безопасность, совместимость, удобство и т.д.)

– структуру и архитектуру продукта

– последствия изменений

Виды тестирования обычно классифицируются по следующим параметрам:
I. По позитивности

– позитивное тестирование – направлено на проверку успешных сценариев, не подразумевает ошибки пользователя

– негативное – направлено на тестирование ошибок различного рода, которые пользователь может совершить, и их обработку системой.

При тестировании любого продукта всегда начинают с позитивных тестов (они – базовые, то, что проверяется в первую очередь), потом составляют негативные.
Пример позитивного теста: "В приложении Telegram успешно отправляется текстовое сообщение". Естественно, данный тест нужно превратить в тест кейс - расписать необходимые шаги для отправки сообщения и ожидаемый результат.
Пример негативного теста: "В приложении Telegram невозможно добавить файл размером 3 Гб" (т.к. для загружаемого файла в приложении установлен максимальный размер 2Гб)

II. По целям тестирования – функциональное и нефункциональное
Функциональное тестирование  – это тестирование всех функций приложения, тех вещей, которые оно должно выполнять.

Нефункциональное тестирование – включает все, что не входит в функциональное тестирование, но является важным показателем качества системы. Сюда относятся:

– Тестирование конфигурации (Configuration testing)

– Тестирование надежности/стабильности (Reliability testing)

– Тестирование инсталляции (Installation testing)

– Тестирование безопасности (Security testing)

– Тестирование отказоустойчивости (Robustness testing)

– Тестирование производительности/нагрузочное (Performance/Load testing)

– Стресс-тестирование (Stress testing)

– Тестирование  удобства использования (Usability testing)

– Тестирование  соответствия требованиям законодательств (Compliance testing)

– и другие.

III. По способу исполнения тестов:

– ручное (manual testing) – без использования дополнительных программных средств (т.е. тестировщик выполняет тесты сам).

–  автоматизированное (automated testing) – с использованием программных средств.

IV. По времени применения тестов:                                   

– Дымовое тестирование (smoke testing) – проверяет ключевые функциональности ПО, неработоспособность которых делает его дальнейшее тестирование бессмысленным. Оно проводится в самом начале тестирования и направлено как на проверку готовности продукта к проведению расширенного тестирования, так и на определение общего состояния его качества.

– Санитарное тестирование (sanity testing) – нацелено на проверку того, что определенные части ПО работают как положено после минорных изменений или исправлений багов. Целью является проверить общее состояние системы в деталях, чтобы приступить к более тщательному тестированию. Санитарное тестирование выполняется перед регрессионным и после smoke-тестов, часто вручную.

– Регрессионное тестирование (regression testing)  – направлено на проверку того факта, что при внесении в код системы (или в ее конфигурации) каких-то изменений, в ранее разработанной функциональности не появились ошибки, вызванные этими изменениями. Как это работает: приходит новый релиз, мы берем regression-библиотеку тех сценариев, которые выполняли в прошлый раз (независимо от того, какой статус по ним стоит - passed (пройден успешно) или failed (провален, т.к. поведение системы не соответствует ожидаемым требованиям, найден дефект) и перевыполняем ее всю, чтобы убедиться, что то, что раньше работало, продолжает также работать, ничего не сломалось. Regression-библиотека - это постоянно нарастающий набор тестов, направленных на обнаружение ошибок в уже протестированных участках исходного кода. Предположим, мы начали тестировать продукт, у нас пришел самый первый релиз, в котором всего одна user story. Мы пишем тестовый набор (test suite, test set) из 10 тест кейсов, чтобы покрыть и протестировать эту одну user story, и выполняем их. Приходит второй релиз, в нем еще одна user story, пишем 15 новых тестов уже на эту вторую user story, чтобы протестировать ее. Regression-библиотекой на момент второго релиза будут те первые 10 тест кейсов на старую user story из первого релиза, а новой бибилотекой будет test suite из 15 тест кейсов на новую user story. Когда придет третий релиз, наша regression-библиотека уже будет состоять из 25 тестов. Regression-библиотеки всегда автоматизированы, потому что во-первых, никто не будет проходить вручную каждый раз все эти тесты (их могут быть тысячи), а во-вторых, надо регулярно проверять актуальность тех сценариев, которые содержатся в тестовой библиотеке и в regression.

– Повторное/подтверждающее тестирование (confirmation testing, retesting) – делается для того, чтобы убедиться, что дефект, который был исправлен разработчиками, действительно исправлен. Здесь нам не важно, появились ли новые дефекты, нам важно проверить, что именно этот дефект был действительно исправлен. Это происходит следующим образом: мы нашли баг (дефект), завели на него баг-репорт, он принимается на исправление в следующем релизе, разработчики его фиксят (исправляют). Собирается новый релиз, мы выполняем весь набор сценариев, статус по которым в предыдущем релизе стоял failed именно из-за этого бага, чтобы убедиться, что эта проблема больше не воспроизводится.

Как regression, так и confirmation testing проводятся на всех уровнях. На уровне модульного тестирования, проводя модульные тесты и находя ошибку, разработчики ее чинят и сами же перепроверяют, что она действительно не воспроизводится. У них имеется своя автоматизированная библиотека unit-тестов, которые они постоянно перепрогоняют. На уровне интеграционного тестирования то же самое - разработчик синтегрировал 2 компонента, нашел проблему в их взаимодействии, починил и перепроверил. На системном и приемочном уровнях естественно тестировщик перепроверит, что исправленный разработчиками дефект действительно исправлен и все работает.

V. По подходу выделяют:

– Исследовательское тестирование (Exploratory testing) – тестирование без строгих тестов, но по определенному маршруту, или mind map. Оно являются тестированием на основе опыта, важным является понимание работы программного обеспечения с предметной точки
зрения.

– Свободное тестирование (Ad-hoc testing) – тестирование без тестов и без какого-либо плана. В свободном режиме тестировщик может тестировать систему, тем самым находя редкие критические ошибки. Такое тестирование не может заменить формализованное, но является хорошим дополнением к проделанному тестированию.

VI. По объекту тестирования:

– модульное –  проверяется корректная работа отдельных единиц (модулей)

– интеграционное –  проверяется взаимодействие между несколькими модулями

– системное – проверяется работа приложения целиком

VII. По исполнению кода:

1) диамическое (dynamic) - требует запуска кода (выполнение тестируемого продукта). Оно включает:

- непосредственное тестирование ПО в реальном времени

- предоставление входной информации

- исследование полученного результата поведения приложения.

Например, мы тестируем вход в систему: придумываем логин, пароль, при этом  придерживаемся определенных условий создания надежного кода (например, пароль должен состоять с не менее, чем из 8 знаков, иметь заглавные и прописные буквы, хотя бы одну цифру и т. д.). Этих условий должен будет придерживаться и пользователь при регистрации, в случае, если он будет вписывать другие данные, не соответствующие этим условиям, программа должна их отклонить. Таким образом, динамическое тестирование данной функции состоит в введении пароля по обозначенным параметрам (условиям) и после этого - в проверке результатов.

2) статическое (static) - с помощью ревью оценивается документация, код или любой другой рабочий продукт без его запуска и является неотъемлемой частью тестирования безопасности. Оно бывает 2-х видов:  ревью - проверка документации (любого рабочего продукта, который участники команды могут читать и понимать) и статический анализ - оценка кода с помощью специальных инструментов (применяется к любому продукту с формальной структурой, например, к коду). В 4 главе будут рассмотрены требования, и тестирование требований  как раз является статическим тестированием. Обязательно применяется к системам с высоким уровнем безопасности - авиация, медицина, ядерное ПО - когда необходимо уже на ранних стадиях проводить ревью требований, документации, потом на стадии кода выполнять статический анализ. Основным плюсом статического тестирования является нахождение дефектов на ранней стадии, ведь чем раньше найден дефект, тем дешевле обойдется его исправление.

И статическое и динамическое тестирование преследуют одну и ту же задачу - проверка качества и нахождение дефектов как можно раньше. Но они ориентированы на поиск разных дефектов: статическое ищет дефекты непосредственно в рабочем продукте, а динамическое - выявляет сбои, вызванные дефектами, когда уже программа запущена. Т.е. дефект может долгое время находиться в коде и не обнаруживаться до тех пор, пока программа не будет запущена.

Все виды тестирования (функциональное и нефункциональное, регрессионное и остальные) могут применяться на всех уровнях тестирования (модульном, интеграционном, системном, приемочном). Например, на уровне интеграционного тестирования (когда проверяем интеграцию компонентов) если компонент A ответил компоненту B, например, на запрос, то это функциональное тестирование, а вот как быстро он ответил - нефункциональное.