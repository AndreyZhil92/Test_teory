Встречающиеся термины:

Test Management System – Система управления тестами, тестовая система

test run – тестовый запуск (прогон теста, "ран")

 

Системы управления тестами

Test Management System – это система, которая позволяет создать, хранить и структурировать тест кейсы. TMS-система решает проблему ведения тестовой документации и взаимодействия членов команды или отделов между собой, так как в ней выстраиваются и оптимизируются процессы тестирования, можно получить быстрый доступ к инструментам,  иметь представление о текущей стадии тестирования и состоянии тестируемого продукта.

Тестовых систем очень много: TestIT, Zephyr, TestLink, TestRail, Xray и другие.

Тестовая система включает в себя следующий функционал:     

– управление тестами и тестовыми сценариями: создание, перемещение, редактирование, удаление тест кейсов;

– планирование тестирования, возможность кастомизировать тест-планы и параметры тестов (да что угодно!);

– создание запуска (= тестового прогона, test run), редактирование, выставление статусов для тестов, удаление;

– Управление отчетами (создание отчетов, возможность их обмена, хранения и т.д.), рабочими процессами.

 

Задачи тестовой системы

1. Проводимое тестирование продукта выявляет возможные ошибки и находит дефекты, из-за которых этот продукт работает не так, как планировалось, поэтому TMS в первую очередь используется для улучшения качества ПО.

2. Т.к. в TMS видны динамические отчеты о текущей работоспособности продукта и  результаты в режиме реального времени, то с помощью TMS можно проводить мониторинг результатов тестирования.

3. Также в TMS можно направить задачу определенному человеку,  что сэкономит время и ресурсы, снизит количество рутинных задач и повысит продуктивность команды в целом.

4. В любой TMS есть возможность выполнять прогон тест кейсов и создавать отчеты по результатам прогонов. Прогнать тест или сделать прогон теста (test run) – это значить запустить его на развернутом окружении (приложении, коде)  и выполнить над приложением по шагам то, что в нем написано. Если steps совпадают с expected results, то тестировщик ставит статус passed. Если не совпадает – failed. Таким образом, после прогона теста ему всегда присваивается статус (не только passed или failed, может быть blocked и другие.)  Статус  failed значит, что тест не прошел (упал), следовательно, в программе баг, и тестировщику нужно составить баг-репорт (отчет об ошибке) — технический документ, который подробно описывает ошибку в работе программы, чтобы разработчикам было понятно, что работает неправильно, насколько дефект критичен и что нужно исправить.

Разберем интерфейс конкретной тестовой системы, а именно TestRail.

TestRail была разработана немецкой компанией Gurock Software. Это специальное программное обеспечение, помогающее специалистам QA и разработчикам наладить процесс тестирования. TestRail – платное ПО, но есть бесплатный пробный период 2 недели. Обладает простым веб-интерфейсом, что облегчает создание тест-кейсов, управление тестовыми прогонами, отслеживание отдельных этапов тестирования. Специальные фильтры, уведомления и списки задач помогают получать полную информацию о ходе тестирования.



DashBoard – стартовая страница, открывается после авторизации в TestRail. Это рабочий стол, на котором отображаются все проекты и диаграмма активности за последнее время (от 7 до 90 дней). При нажатии на проект открывается страница управления проектом.

Основные вкладки:

1. Overview содержит сводку по текущему состоянию проекта (список недавно завершенных проверок, последние тестовые прогоны). На специальной диаграмме активности отображается общий результат тестирования за определенный промежуток времени.  Можно посмотреть все пройденные тест-кейсы и их статусы: passed, failed, blocked и retest (нуждается в повторном тестировании). Всякий раз, когда требуется переключиться на другой проект, нужно вернуться на стартовый экран, нажав на «Return to Dashboard» в верхнем левом углу.



2. Todo раздел интегрирован со страницей запуска тестовых прогонов, чтобы тестировщик сразу мог перейти к выполнению своих задач. Он отображает текущий прогресс тестирования проекта с помощью цветовой шкалы, отслеживает и фильтрует текущие активности, помогает работать над конкретными задачами;



3. Milestone используется для создания отдельных этапов проекта, в которых поэтапно тестируются различные версии. При создании нового этапа (майлстоуна) можно установить дату его начала и завершения, что помогает отслеживать сроки выполнения и порядок тестирования версий. Также можно добавить описание и пометить завершенные этапы, что поможет сконцентрироваться на активных задачах.



 4. Test Runs & Results используется для управления тест кейсами и их выполнения.



Тестировщик может создать прогон чек листа, нажав на кнопку «Add Test Run», указав имя для теста и по необходимости дополнительные данные:

- Milestone: чтобы связать тестовый прогон с нужным этапом тестирования;

- AssignTo: в этом параметре назначается ответственный за осуществление прогона;

- Description: подробное описание тестового прогона;

- All test cases include (select cases): по умолчанию все хранящиеся в проекте тест-кейсы включаются в тестовый прогон, но пользователь может вручную выбрать из общего списка необходимые для проверки кейсы.

После создания тестового прогона можно перейти к его непосредственному выполнению: открыть каждый тест кейс, ознакомиться с предложенными условиями, провести, проставить статус. Может добавить собственный комментарий, указать время, потраченное на проверку, и выявленные баги. Поскольку TestRail может подключаться к Jira, Bugzilla и Firebug в пункте результата под названием “Defects” можно указать идентификатор конкретного бага, заведенного в данных сервисах.



5. Test Suites and Cases – здесь создаются и хранятся все тест кейсы и чек листы тестируемого приложения. Тест кейсы можно и нужно группировать в подразделы,  что позволяет разбить тестирование проекта на различные группы с определенными типами заданий. Например, одни отвечают за проверку механики или серверной части проекта, другие за проверку интерфейса, локализации и т.д.



Для того чтобы добавить новый раздел, необходимо нажать на кнопку Add Subsection, и после создания перейти на его страницу, где уже создать необходимые тест кейсы с помощью «Add Case». В тест кейсе по необходимости заполняются следующие поля:

1. Title — название кейса;

2. Section — раздел, к которому будет относиться задание;

3. Type — определяет тип тестирования: смоук, функциональное, юзабилити, регрессия и т.д.;

4. Priority — установка приоритета тест-кейса;

5. Template — установка шаблона (exploratory session, steps, text);

6. Estimate — оценка задачи;

7. Milestone — выбирается этап, к которому относятся задания;

8. Reference — сюда указывается ссылка на таск из Jira или другого сервиса;

9. Description — подробное описание задачи;

10. Precondition — предварительные условия, которые необходимо осуществить перед выполнением задачи;

11. Steps — шаги, которые необходимо осуществить для проверки кейса и выявления багов;

12. Expected Result — ожидаемый результат, описывающий как должно работать приложение без дефектов.

Можно изменять или добавлять новые поля, а также графическую информацию(картинки).



Готовые кейсы можно переносить между разделами, копировать, экспортировать в XML, Excel/CSV или импортировать из XML или CSV-файла в TestRail.

6. Report используется для описания результатов проделанной работы. Отчет по тестированию состоит из фактической информации о проведенном тестировании, в нем указываются статусы кейсов и выявленные ошибки. Функционал сервиса позволяет генерировать отчетности, отправлять их по почте, а также использовать для их создания готовые шаблоны.



В отчете должно быть только два статуса – passed или failed, это и будет результатом тестирования. Этот результат показывает, что тест был прогнан, если успешно – тогда passed, если есть ошибка – тогда failed. Прогонов на один и тот же проект/продукт может быть несколько (на разных версиях), после чего тест ран финализируется. Баги – это ошибки программы, не тестов, и если у тест кейса статус failed, то значит в программе есть ошибка и разработчики должны ее устранить. После устранения ошибки тестировщик заново на новой версии делает прогон тестов.

Не надо финализировать проект с тестами, у которых есть статусы untested, blocked, in progress и другие, так как в таком случае отчет считается не сделанным до конца. Статус blocked  говорит о том, что тест вообще не смогли прогнать, он заблокирован чем-то другим, поэтому если кейс со статусом blocked не важен, лучше убрать его из тест рана, не прогоняли его, следовательно и в отчете его нет.  :)