Встречающиеся термины:

test case  – тест кейс, тестовый случай, тест
use case – пользовательский сценарий
checklist – чеклист, список проверок
feature – "фича", особенность, необычное свойство, «фишка». В it фичей называют какую-то функциональность/возможность ПО, программное решение или его характеристику.
title – заголовок, короткое и понятное название проверки
step – шаг, одно определенное действие
expected result – ожидаемый результат
description – описание
priority – приоритет
preconditions –  условия, исходные данные, необходимые для выполнения тест кейса

Что такое тест кейс?

Тест кейс – это по сути пошаговая инструкция к функционалу приложения. Он дает представление о том, какое поведение ожидается от приложения, и любое отклонение от предполагаемого результата будет являться багом.  Мы пошагово (1.. 2.. 3.. и т.д.) описываем необходимые действия и их результатов (1 - результат на 1 шаг, 2-результат на 2 шаг и т.д.)  для воспроизведения определенного пользовательского сценария (use case). В тест кейсе всегда каждому действию (шагу) обязательно соответствует ожидаемый результат. 

Пример тест кейса: "Успешная авторизация пользователя в приложении, используя почту".

Целью данного тест кейса является осуществление авторизации, поэтому расписываем следующие шаги, помогающие ее добиться:

Шаги (steps):

1)    ввести существующий email,

2)    ввести пароль к нему

3)    нажать кнопку «Войти»

У каждого из этих шагов прописывается ожидаемый результат (expected result):

1) в поле ввода отображается вводимый email

2) в поле ввода отображается вводимый пароль

3) открывается страница приложения, пользователь авторизован

Данный пример иллюстрирует 2 основных момента в тест кейсе: всегда есть входные данные – напрмер, email и пароль и выходные данные – результат тест кейса (в данном примере – успешный вход в систему).

Тест кейсы пишутся и хранятся в системе управления тестами (Testpad, TestRail, PractiTest, Xray и др.). Набор тест-кейсов называют test suit - тест-сьютом (тестовый набор), который не надо путать с тест планом. Тест-план состоит из перечня работ и описания необходимых для их выполнения условий: как, когда, с помощью чего они должны быть проведены в рамках тестирования продукта. Тест сьют - это комплект тест кейсов, относящихся к одному тестируемому модулю, функциональности, приоритету или одному типу тестирования. Такое объединение тест кейсов в один набор делается для большего удобства при проходжении этих тест кейсов, так как проходя их последовательно от модуля к модулю, от одного типа тестирования к другому, мы не бросаемся из одного угла в угол, оставив непроверенным большую часть модуля или общей функциональности.

Для чего нужны тест кейсы?

Тестировщик пишет тест кейсы для того, чтобы продукт можно было проверить без ознакомления со всей документацией. Написав один раз тест кейс (хороший и удобный в поддержке), тестировщик экономит много времени и сил себе и другим тестировщикам.

Чем отличается test case от use case?

Use case – сценарий/вариант использования системы, описывает все действия (шаги), которые пользователь может произвести, и реакцию системы на эти действия. На основе use case можно прописывать тест кейсы. Проще говоря, в юз кейсе описываются правила/пути пользования определенного функционала, в тест кейсе  - то как будет тестироваться функционал.

Рассмотрим  цепочку:    Product     >    Product's Features    >   Use Cases   >    Test Cases.  

Любой продукт состоит из какого-то набора функциональностей (фич). Каждая фича имеет несколько вариантов использования – юз кейсов.
На каждый юз кейс какой-либо фичи можно составить тест кейсы.

Пример:  у текстового редактора Notepad для txt файлов одной из фич является  copy\paste (копировать/вставить).  Use cases:

1) вставка (paste) скопированного текста из другого приложения. Этот вариант дает возможность составить следующие тест кейсы:

 – открыть другой текстовый редактор (Word), скопировать в нем текст, вставить в тестируемый редактор и убедиться, что все скопированное вставилось

– открыть графический редактор (Paint), скопировать картинку, попытаться вставить в тестируемое приложение и убедиться, что оно вставилось

 – и т.д.

2) использовать фичу copy\paste внутри редактора (здесь можно составить несколько тест кейсов, раскрывающих, каким образом это можно протестировать)

3) взять фичу copy из этого редактора и paste в другом приложении (+ тест кейсы, проверяющие данный use case).

И т.д.

Use case не надо путать с user story - кратким описанием функциональности, детали которой должны уточняться в ходе устных обсуждений между заинтересованными лицами проекта (М. Кон "Пользовательские истории: гибкая методология разработки ПО"). User story - это контекст, про потребность пользователя, пишутся от лица реального человека, например:

"Я, как водитель, в момент включения лампочки низкого уровня топлива, хочу заправить свою машину на ближайшей заправке."

Юз кейс - это уже не история, а наиболее технический и напоминающий алгоритм случай. Юз кейс описывает поведенческие особенности от лица абстрактных пользовательских ролей:

"Я как пользователь-водитель (с включенной лампочкой низкого уровня топлива) смогу:

- посмотреть все ближайшие заправки на карте

- посмотреть все ближайшие заправки списком

- выбрать заправки нужного бренда

- посмотреть на выбранной заправке наличие нужного топлива

- построить до выбранной заправки маршрут"

Чем отличается тест кейс от чек листа?

Тест кейс – это последовательность действий, которые нужно проверить шаг за шагом. Чек лист – это документ, который содержит список проверок. Он менее подробен по содержанию, в нем отсутствуют шаги, как в тест кейсе. Один пункт чек листа описывает одно направление для проверки. Чек лист содержит:

- список проверок с требуемой степенью детализации

- статус проверок (результат)

- сборка, на которой проводилось тестирование

- тестовое окружение (если применимо)

- кто проводил тестирование

Например, нам надо положить товар в корзину.

Тест кейс будет выглядеть следующим образом:

title: "Успешное добавление книги в корзину в интернет-магазине".

steps:

1. Перейти на сайт siteName.ru.

2. Перейти в раздел Книги.

3. Нажать на кнопку «В корзину» у первой книги.

4. Нажать кнопку «Перейти в корзину».

expected results:

1. Открывается страница сайта, отображаются раздел сайта

2. Отображается содержимое раздела Книги

3. В карточке товара отображается количество 1

4. Откроется страница «Корзина» с одним добавленным товаром.

Пункт чек листа может выглядеть так:

1) Добавить книгу в корзину.

В чек листе не описывается по шагам, куда нажать, что конкретно сделать, а просто указываем направление, что нужно сделать такое-то действие, в данном случае – добавить товар в корзину. Как товар будет добавлен в корзину, откуда, куда нужно перейти до этого – это уже на усмотрение тестировщика, который проводит тестирование по этому пункту чек листа.

 Как выглядит тест кейс?

Любой тест кейс имеет обязательные для заполнения поля:

- Title  – должен быть лаконичен и вмещать в себя всю суть теста;

- Priority – приоритет тест кейса, в основном определяется бизнес логикой продукта и показывает важность выполнения теста в рамках тестирования по отношению к другим тестам;

- Description – короткое, но более подробное описание сути тест кейса. Оно  должно содержать ответ на вопрос:  что проверяет данный тест кейс;

- Preconditions – действия и условия, которые необходимо выполнить перед началом проверки;

- Requirements – основное требование, проверке выполнения которого посвящен тест кейс

- Steps – описание шагов для выполнения тест кейса. Все шаги должны быть  максимально понятными для всех;

- Expected results – описание ожидаемых результатов проверок на каждом шаге. Успешность прохождения теста определяют путем сравнения ожидаемых и фактических результатов: совпадают - тест пройден, нет - провален. Ожидаемые результаты тест кейса всегда отталкиваются от тестовых сценариев, определяются их спецификацией.

Пример тест кейса взят отсюда https://sergeygavaga.gitbooks.io/kurs-lektsii-testirovanie-programnogo-obespecheni/content/lektsiya-4-ch3.html



1. UG_U1.12  – уникальный идентификатор теста, каждому тест кейсу, созданному в тестовой системе, автоматически присваивается свой id.

2. Priority – приоритет, который показывает важность тест кейса. Приоритет может быть выражен буквами (A, B, C, D, E), цифрами (0, 1, 2, 3, 4, 5), словами (critical, high, medium, low  или по-русски: «крайне высокий», «высокий», «средний», «низкий»). В данном тест кейсе он A – самый высокий, тест кейсы с таким приоритетом должны выполняться в первую очередь. Например, если мы тестируем трейдинговую платформу, то тесты на вычисления, матчинг, саму торговлю будут иметь самый высокий приоритет, а тесты, которые относятся к каким-то манипуляциям через фронтенд, которые не имеют особого влияния на бизнес логику платформы, будут иметь низкий приоритет.

3. Title – заголовок “Проверка имени со спецсимволами”.  Заголовки должны отражать, что именно проверяется в тест кейсе.    

4. steps – необходимые шаги для проверки (и выявления багов).

5. еxpected results – ожидаемые результаты на каждый шаг.

В структуре тест кейса также обычно находятся связанные с тест кейсом требования (requirements), предусловия (preconditions), статус (passed – пройден, failed – провален, blocked – заблокирован, untested – непротестирован,  in progress и др.).

К тест кейсу можно прикреплять скриншоты, видео или ссылки на документацию, которые быстро помогают понять, о чем идет речь.


Памятка для написания хорошего тест кейса
1. Заголовок отражает суть тест кейса. Из него уже должно быть понятно, что именно мы проверяем.
2. Один тест кейс должен проверять одно действие пользователя или системы.
3. Никаких лишних начальных шагов (типа «запустить приложение…» и т.д.), начинать писать шаги следует с очевидного места.

4. Даже если тест кейс состоит всего из одного шага, его тоже надо нумеровать (чтобы избежать в будущем его перемещения в другой текст).
5. Все шаги должны начинаться с повелительного наклонения: открыть, ввести, напечатать (вместо откройте, введите, напечатайте…).
6. Все шаги должны писаться последовательно, не надо использовать «если что-то, то то-то»
7. Всегда следует соотносить детализацию шага с целью тест кейса, в этом случае получится максимально четко прописать указания. Избыточная информация только затрудняет прохождение тест-кейса.
8. Номер шага должен всегда соответствовать номеру ожидаемого результата. Даже если ожидаемых результатов несколько, номер для них все равно один.
9. Никакого субъективного толкования типа «приложение работает верно». Только шаг – результат.
10. Ожидаемый результат нужно писать по всем шагам, даже если кажется, что результат шага будет очевидным.
11. Стараться писать кратко, но информативно.

Когда тест кейс плохой?

1. Тест кейс зависит от других тест кейсов. Рано или поздно бывает, что тест-кейс больше не актуален или его изменили, и в этом случае станет непонятно, как выполнить привязанный к нему другой тест-кейс.

2. Размытость и непонятность в описании шагов или ожидаемого результата –  прохождение такого тест кейса практически невозможно.

3. Не хватает или вообще отсутствует необходимая информация. Например, если мы проверяем форму логина на сайте, нам нужен логин и пароль, в противном случае мы не сможем пройти тест.

4. Слишком много детализации, т.к. излишняя информация в тест кейсе только затрудняет его прохождение. Например, когда мы тестируем создание комментария, указание в каком месте экрана должно быть форма логина будет излишним.

 
