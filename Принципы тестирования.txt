ISTQB – международная организация, которая сертифицирует тестировщиков
presence of defects – наличие дефектов
absence – отсутствие чего-то (absence of defects, absence of errors)
early testing – раннее тестирование
exhausted testing – исчерпывающее тестирование – когда тестируется все со всем, на все условия и всевозможные комбинации
defect clustering – концентрация дефектов в больших количествах в некотором блоке программы
“pesticide paradox” – “парадокс пестицидов” – если повторять те же тесты снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты
 dependent – зависящий (context dependent, time dependent)

7 принципов тестирования (по ISTQB)
1.  Тестирование показывает только наличие дефектов, но не их отсутствие (Testing shows the presence of defects, not their absence). Оно снижает вероятность наличия того, что в программном обеспечении останутся не обнаруженные дефекты, но не гарантирует их отсутствие. Даже если мы уверены, что хорошо покрыли наш функционал тест кейсами, провели все возможные проверки, прогнали разные уровни тестирования, - все равно мы не можем гарантировать, что в ПО не осталось дефектов. Т.е. даже если дефекты больше не обнаруживаются, это не является доказательством того, что их там нет. Так происходит потому что мы не можем провести исчерпывающее тестирование, о чем гласит следующий принцип:
2.  Исчерпывающее тестирование невозможно (Exhaustive testing is impossible). Современные приложения очень сложные, количество входных данных в них огромное и проверка всех их комбинаций превысит все разумные пределы. Такое тестирование может занять годы, поэтому оно физически невыполнимо. Из-за этого мы не можем гарантировать отсутствие дефектов (1-й принцип). Вместо него должны использоваться анализ рисков и расстановка приоритетов. Минимизировать риски помогают техники тест-дизайна, позволяющие тестировщикам проектировать свои тесты так, чтобы с минимальными усилиями покрыть как можно больше тестовых случаев и функциональностей.
3. Тестирование на ранних этапах поможет сохранить время и ресурсы (Early testing saves time and money). Тестирование требований – это как раз и есть тестирование на раннем этапе, ведь чем раньше начато тестирование, тем раньше находятся ошибки. Тестовые активности должны начинаться как можно раньше и всегда преследовать определенные цели: экономия времени, средств заказчика и т.д.
4.  Дефекты имеют свойство скапливаться (Defects cluster together). Зачастую в небольшом количестве модулей скрыто большое количество дефектов (багов). Тестируя программу и  найдя в ней баг, хороший тестировщик не поленится поискать еще баги рядом, ведь найденный баг зачастую оказываеся следствием другого более критичного бага. Дефекты скапливаются по определенным причинам, например, требования на один компонент писал человек, который не очень хорошо разбирается в вопросе, а над другими работали более опытные аналитики. То же самое относится и к разработчикам и их опыту. Также надо принимать во внимание сложность функционала - чем он сложнее, тем больше проблем от него надо ожидать. Поскольку причины сконцентрированы именно в определенных частях программы, именно из-за этого в них и образуется скопление дефектов.
5.  “Парадокс пестицидов” (Beware of the pesticide paradox) – использование одних и тех же тестов выявляет все меньше и меньше ошибок. Повторное использование одной и той же смеси пестицидов для уничтожения насекомых во время земледелия со временем приведет к тому, что у насекомых будет развиваться устойчивость к пестицидам. Таким образом, пестициды будут неэффективны для насекомых. То же самое относится и к тестированию программного обеспечения. Если проводится один и тот же набор повторяющихся тестов, метод будет бесполезен для обнаружения новых дефектов. Чтобы его преодолеть, необходимо регулярно пересматривать существующие тест кейсы и создавать новые, разнообразные тесты, которые будут выполняться на различных частях системы.
6.  Тестирование зависит от контекста (Testing is context dependent). Выбор методологии, техники или типа тестирования напрямую зависит от природы самого продукта, ведь ПО для медицины требует более глубокой и тщательной проверки, чем компьютерная игра. А способ тестирования сайта электронной коммерции будет отличаться от способа тестирования рекламы с готового приложения.
7. Заблуждение об отсутствии ошибок (Absence of errors is a fallacy). Связан с первым принципом: иногда люди считают, что раз ошибок в ПО нет, то это качественное ПО. Но такое мнение ошибочно: нахождение и исправление всех багов не гарантирует качество, сделав свой программный продукт безошибочным на 99%, мы не можем сказать, что он будет полностью отвечать потребностям и требованиям клиентов. Нахождение и починка багов будет бесполезной процедурой, если система неудобна для пользователя. Ведь готовый продукт всегда будет содержать какие-то ошибки, не стоит заблуждаться в том, что мы сможем выполнить все возможные тесты и найти все возможные дефекты. Даже если мы не встретили ошибок, это не значит, что их там нет, поэтому тестировщик всегда должен быть готов к худшему)). А в готовом продукте важно не отсутствие ошибок, а их критичность, скорость реакции и исправления.