Встречающиеся термины и определения:

Performance testing – процесс тестирования с целью определить производительность программного продукта.

Нефункциональное тестирование – включает проверку корректной работы нефункциональных требований. Это про то, насколько хорошо система работает, здесь проверяем все, что не входит в функциональное тестирование, но является важными характеристиками качества системы:

– Тестирование безопасности (Security testing) выявляет недостатки в механизмах безопасности продукта, которые защищают его данные и поддерживают его функциональность, показывает, насколько ПО уязвимо к различным атакам. Что обычно проверяют на безопасность: отображение важной информации в зашифрованном виде (пароли, cvv карты и т.д), наличие правил создания паролей при регистрации, невозможность зайти под старым паролем после смены пароля, сообщения об ошибках не содержат никакой секретной информации и др.

– Тестирование отказоустойчивости (Robustness testing) проверяет тестируемый продукт с точки зрения способности противостоять и успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками программного обеспечения, отказами оборудования или проблемами связи (например, отказ сети).  Целью является проверка систем восстановления, которые, в случае возникновения сбоев, обеспечат сохранность и целостность данных тестируемого продукта. Данный вид тестирования очень важен для систем, работающих по принципу “24x7”, например,  банковское приложение, финансовые заявки, торговые платформы и т.д.

– Тестирование конфигурации (Configuration testing) направлено на проверку работы ПО при различных конфигурациях системы (поддерживаемых драйверах, при различных конфигурациях компьютеров и т.д.). Частью Configuration testing является тестирование совместимости - Compatibility testing (некоторые авторы выделяют его в отдельный вид), которое проверяет насколько система умеет делиться своими ресурсами. Когда у нас в одной и той же программной среде живет наша система и еще какая-то и мы тестируем, насколько наша система может сосуществовать с другой системой. В Configuration testing также относим:

а) тестирование кроссбраузерности (Cross browser testing) - проверку работы приложения в разных браузерах либо разных версиях одного браузера - может выделяться и как отдельный вид.

б) тестирование кроссплатформенности (Cross platform testing) - проверку работы одного и того же приложения на разных операционных системах - также может выделяться и как самостоятельный вид.

– Тестирование надежности/стабильности (Reliability testing) проверяет работоспособность ПО при длительном тестировании с ожидаемым уровнем нагрузки. Причем длительность его проведения не имеет первостепенного значения, основная задача – наблюдая за потреблением ресурсов, выявить утечки памяти и проследить чтобы скорость обработки данных и/или время отклика приложения в начале теста и с течением времени не уменьшалась. В противном случае вероятны сбои в работе продукта и перезагрузки системы.

– Тестирование инсталляции (Installation, Deployment testing) проверяет инсталляцию и настройку, а также установку, обновление, удаление ПО на всех заявленных платформах.

– Тестирование производительности/нагрузочное (Performance/Load testing) заключается в тестировании различных показателей производительности системы путем моделирования различных нормальных условий нагрузки с помощью инструментов автоматического тестирования. Проверяем:

а) время - насколько время отклика, обработки, производительности ситемы отвечает заявленным требованиям

б) ресурсы - количестко и типы ресурсов, которые система реально использует для выполнения своих функций по сравнению с тем, что указано в требованиях (например, емкость диска, использование памяти и т.д.)

в) емкость - насколько максимальные пределы какого-то определеннего параметра соответствуют заявленным требованиям. Этим параметром может быть, например, максимальное количество пользователей, максимальный объем данных обработки за секунду, максимальное количество транзакций в день и т.д.

Load testing - нагрузочное тестирование - некоторыми авторами (Рекс Блэк "Ключевые процессы тестирования") выделяется в отдельный вид тестирования и фокусируется на способности системы справляться с возрастающим уровнем ожидаемой нагрузки.

Примером Performance testing может быть проверка работы системы, когда в ней сразу много разных данных: пользователи/задачи/сообщения/комментарии и т.д. Или проверка успешного выполнения системой операции с большим количеством данных: создание, перемещение, удаление и т.д.

– Стресс-тестирование (Stress testing) основано на тех же характеристиках, что и Performance (время, ресурсы и емкость) и направлено на превышение ожидаемых нагрузок, поиск слабых мест системы. Оно используется для того, чтобы эту систему сломать и посмотреть, как она будет вести себя при пиковых и аномальных нагрузках, а также в процессе отказа тех или иных ее частей. Например, загрузить файл, размер которого сильно превышает указанный в требованиях, или проверить работу приложения, когда в нем запущено множество процессов. Так как данный вид тестирования оценивает надежность и устойчивость системы в условиях серьезного превышения пределов нормального функционирования, его особенно необходимо проводить для критически важного ПО.

– Тестирование  удобства использования (Usability testing) проверяет, удобно ли будет пользоваться тем функционалом, который есть в программе.

– Тестирование  соответствия требованиям законодательств (Compliance testing)

–и другие.

Нефункциональное тестирование также основывается на техниках черного ящика и также используется на каждом уровне тестирования. Так, на уровне модельного тестирования, например, если наш модуль (компонент) делает какие-либо математические вычисления, то мы проверяем сколько ресурсов им в это время потребляется, и если видим превышение ожиданий разработчика, то указываем на это. На уровне интеграционного тестирования, когда 2 компонента интегрированы друг с другом, смотрим, например, как быстро происходит их взаимодействие. На системном уровне проверяем, к примеру, шифрование или отказоустойчивость - как быстро она восстановится после наших тестов. На приемочном уровне  тоже можем проверить и отказоустойчивость и юзабилити и много еще чего.